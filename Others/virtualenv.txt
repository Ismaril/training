MAIN IDEA BEHIND VIRTUAL ENVIRONMENTS:
    virtualenvs are meant to only separate dependencies and packages from your projects. (=future
    updates of those packages could have an influence on your projects and might even stop working)
    You shold not include project files in virtualenv, the should just simply be "free to operate with".


create a separate folder for all virtual environments

create a new virtual env.:
    python -m venv name_of_project_env






Below code was taken from tutorial with bash, and I was trying to change it to cmd. It might need some look up
if is still relevant.

pip install virtualenv

create a separate folder for all virtual environments

create a new virtual env:
    virtualenv name_of_project_env

    create new virtual env with specified python version
    virtualenv -p /usr/bin/python2.6 name_of_project_env (check if /usr/ is not actually smth else)

activate your virtualenv:
    source name_of_project_env/bin/activate
    (now you will be in your virtual environment)

check destination of your working env:
    which python (which is bbly linux, use "where" instead?)

your new envirnoment is now empty, so instal some packages you actually need:
    pip install blabla...

export packages and their version in current virtualenv (handy for installing them together):
    pip freeze --local > requirements.txt

get out of virtualenv to global env:
    deactivate

get rid of virtualenv:
    just delete it (del name_of_project_env??)

install packages from an export of packages you made earlier:
    pip install -r requirements.txt