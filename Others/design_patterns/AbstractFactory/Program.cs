using AbstractFactory;

// The majority of the code in this solution was generated by GPT4.


/*
EXPLANATION
-----------------------------------------------------------------------

1. ABSTRACT PRODUCTS: 
Button and Checkbox are interfaces (or could be abstract classes, I ugess...)
that define the interface for different types of GUI elements.

2. CONCRETE PRODUCTS: 
WindowsButton, MacOSButton, WindowsCheckbox, and MacOSCheckbox are concrete 
implementations of the abstract products.

3. ABSTRACT FACTORY: 
GUIFactory is an interface (or I guess again, could be abstract class?) 
that declares methods for creating abstract product objects.

4. CONCRETE FACTORIES: 
WindowsFactory and MacOSFactory are concrete implementations of the 
GUIFactory that create concrete products for Windows and MacOS respectively.

5. CLIENT CODE: 
The Client class uses the factory interface to create and use products. 
The Program class demonstrates how the client can work with different 
factories to create products for different operating systems without 
knowing their concrete implementations.
*/

namespace AbstractFactory
{
    // 5. CLIENT CODE
    // ----------------------------------------------------------------    

    /// <summary>
    /// This is a code which will use a Client/User at his side.
    /// </summary>
    class Client
    {
        // Fields
        private IButton _button;
        private ICheckBox _checkbox;

        /// <summary>
        /// Constructor of the class.
        /// </summary>
        /// <param name="factory"></param>
        public Client(IGUIFactory factory)
        {
            _button = factory.CreateButton();
            _checkbox = factory.CreateCheckBox();
        }

        public void Paint()
        {
            _button.Paint();
            _checkbox.Paint();
        }
    }

    /// <summary>
    /// Main C# entry point
    /// </summary>
    class Program
    {
        static void Main(string[] args)
        {
            Client client1 = new Client(new WindowsFactory());
            client1.Paint();

            Client client2 = new Client(new MacOSFactory());
            client2.Paint();

            Console.ReadLine();
        }
    }
}



