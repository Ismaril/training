using Prototype;
using Rectangle = Prototype.Rectangle; // Alias to avoid conflict with System.Drawing.Rectangle

// Majority of the code in this solution was generated by GPT4.

/*
The Prototype design pattern is a creational pattern that allows you to create new 
objects by copying an existing object, known as the prototype. 
This pattern is particularly useful when the process of creating an object is 
resource-intensive, and you can gain performance by copying an existing instance rather 
than creating a new one from scratch.


KEY COMPONENTS
1. PROTOTYPE:
An interface that declares the Clone method.

2. CONCRETE PROTOTYPE:
A class that implements the Clone method from the Prototype interface.

3. CLIENT:
A client that uses the prototype to create new objects.
*/
class Program
{
    // 3. CLIENT CODE:
    // The client creates instances of Circle and Rectangle, clones them,
    // and modifies the clones to demonstrate that they are separate instances.
    static void Main(string[] args)
    {
        // Create an instance of Circle
        Circle circle1 = new Circle(10);
        Console.WriteLine(circle1);

        // Clone the Circle
        Circle circle2 = (Circle)circle1.Clone();
        Console.WriteLine(circle2);

        // Modify the clone
        circle2.Radius = 20;
        Console.WriteLine(circle1);
        Console.WriteLine(circle2);


        Console.WriteLine("----------------------------------------");


        // Create an instance of Rectangle
        Rectangle rect1 = new Rectangle(7, 9);
        Console.WriteLine(rect1);

        // Clone the Rectangle
        Rectangle rect2 = (Rectangle)rect1.Clone();
        Console.WriteLine(rect2);

        // Modify the clone
        rect2.Width = 30;
        Console.WriteLine(rect1);
        Console.WriteLine(rect2);

        Console.ReadLine();

        /*
        This output which goes into console shows that the original objects and their clones 
        are separate instances. Modifying the clone does not affect the original object, 
        demonstrating that the Clone method successfully creates a new instance. 
        The Prototype pattern is useful when creating objects is resource-intensive, 
        as it allows for creating new objects by copying existing ones.
         */
    }
}