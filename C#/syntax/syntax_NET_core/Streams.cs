using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace syntax_NET_core
{
    internal static class Streams
    {
        // How to work with files? Create some stream class. Then create some writer/reader class that takes
        //  as an argument the initial instance of stream class.
        public static void Main__()
        {
            // Since the actual executable is in bin/Debug/net5.0/ folder, we need to go back to the
            //  root folder of the project and then go to the Files folder.
            // Using ..\ syntax to go back in folder hierarchy.
            string filePathAndName = Path.Combine(
                @"..\..\..\Files",
                "data.bin"
                );

            Utilities utilities = new();
            utilities.PrintLine();

            // BE CAREFUL WHEN USING "USING" STATEMENT WITHOUT BRACKETS () AND {}. SEEMS IT DOES NOT
            //  WORK PROPERLY WITH FILESTREAM. IT DOES NOT CLOSE THE FILESTREAM AFTER USING IT.
            // The code in line below will either create a new file or overwrite the existing one.
            using (System.IO.FileStream filestream
                    = new(filePathAndName, FileMode.Create, FileAccess.Write))
            {
                // Write binary into filestream
                //filestream.Write("Nazdar".Select(x => (byte)x).ToArray(), 0, 6);

                // Better way to write binary into filestream
                BinaryWriter binaryWriter = new(filestream);
                binaryWriter.Write("Nazdar Woe");
                filestream.Flush();

                Console.WriteLine(
                $"CanRead: {filestream.CanRead},\n" +
                $"CanWrite: {filestream.CanWrite},\n" +
                $"CanSeek: {filestream.CanSeek},\n" +
                $"CanTimeout: {filestream.CanTimeout}"
                );
            }

            utilities.PrintLine();

            // Read binary from filestream
            using (System.IO.FileStream filestream2
                    = new(filePathAndName, FileMode.Open, FileAccess.Read))
            {
                BinaryReader binaryReader = new(filestream2);
                Console.WriteLine(binaryReader.ReadString());
            }

            utilities.PrintLine();

            // MEMORY STREAM
            // In example below you see that it is possible to write and read in the same
            //  using statement. It is because the memory stream is not a file but a memory.

            // Generated by copilot:
            /*
            In C#, a MemoryStream is a stream that is backed by memory rather than by a physical
                disk or network connection. This makes it faster for scenarios where you need to read
                and write data sequentially or randomly,
                as it doesn't have the overhead of disk I/O operations.
            */

            using (System.IO.MemoryStream memoryStream = new())
            {
                BinaryWriter binaryWriter = new(memoryStream);
                binaryWriter.Write("Nazdar Ty Woe!");
                memoryStream.Flush();
                memoryStream.Position = 0; // Return position (lets say a cursor) back to the beginning of the stream.

                BinaryReader binaryReader = new(memoryStream);
                Console.WriteLine(binaryReader.ReadString());
            }

            utilities.PrintLine();

            // STREAM READER AND WRITER
            // StreamReader and StreamWriter are used to read and write text files.
            string filePathAndName2 = Path.Combine(
                @"..\..\..\Files",
                @"data.txt"
                );

            // Write data into file
            using (System.IO.StreamWriter streamWriter = new(filePathAndName2))
            {
                // Write line by line (each WriteLine method writes a new line)
                streamWriter.WriteLine("Cau Ty Woe!");
                streamWriter.WriteLine("Ahoj Ty Woe!");
                streamWriter.WriteLine("Nazdar Ty Woe!");
            }

            // Read data from file
            using (System.IO.StreamReader streamReader = new(filePathAndName2))
            {
                string line;
                while ((line = streamReader.ReadLine()) != null)
                {
                    Console.WriteLine(line);
                }
            }

            utilities.PrintLine();

            // ENCODING
            System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);
            System.Text.Encoding encoding = System.Text.Encoding.GetEncoding("windows-1250");

            // UTF8 default encoding
            System.Text.Encoding encoding_UTF8 = System.Text.Encoding.UTF8;

            string filePathAndName3 = Path.Combine(
                @"..\..\..\Files",
                @"data2.txt"
                );

            // Write data into file
            using (System.IO.StreamWriter streamWriter = new(filePathAndName3, false, encoding))
            {
                streamWriter.WriteLine("Se z toho posereš");

            }

        }
    }
}
